install.packages("zcurve")
install.packages("readxl")
### get a list of file names in the directory
file.names = list.files(full.names = FALSE);
file.names
### read the data from csv file
data = data.frame(read.csv("data/test.csv"))
head(data)
### see how many rows and columns there are
dim(data)
### read the column/variable names
colnames(data)
### see how many rows have pvalues vs. no data (NA)
table(!is.na(data$z))
### remove rows with missing data
data = data[!is.na(data$z),]
### if the data are p-values, transform p-values to z-values
### using log.p allows to convert even very small p-values
data$z = qnorm(log(1 - data$p/2), log.p=TRUE)
### if the data are p-values, transform p-values to z-values
### using log.p allows to convert even very small p-values
data$z = qnorm(log(1 - data$p/2), log.p=TRUE)
### replace very high z-scores and infinity (Inf) with a maximum value of your choice (any value greater than 6 is ok)
data$z[data$z > 10] = 10
### get summary statistics for the transformed z-scores
summary(data$z)
### if numer of z-scores (k) is large, run first without bootstrap
results = zcurve(data$z, bootstrap = 0); plot.zcurve(results); summary(results)
library(zcurve)
### load the excel package to read excel files
library(readxl)
### if the data are p-values, transform p-values to z-values
### using log.p allows to convert even very small p-values
data$z = qnorm(log(1 - data$p/2), log.p=TRUE)
### replace very high z-scores and infinity (Inf) with a maximum value of your choice (any value greater than 6 is ok)
data$z[data$z > 10] = 10
### get summary statistics for the transformed z-scores
summary(data$z)
### if numer of z-scores (k) is large, run first without bootstrap
results = zcurve(data$z, bootstrap = 0); plot.zcurve(results); summary(results)
### show full z-curve including predictd distribution for non-significant results
plot.zcurve(results,extrapolate = TRUE)
### show full z-curve including predictd distribution for non-significant results
plot.zcurve(results,extrapolate = TRUE)
### show full z-curve including predictd distribution for non-significant results and confidence interval
plot.zcurve(results,extrapolate = TRUE, CI = TRUE)
### add annotation with key results to the plot
plot.zcurve(results,extrapolate = TRUE, CI = TRUE, annotation = TRUE)
### compute Observed Discovery Rate (ODR); percentage of significant results
alpha = .05
odr = table(data$z > qnorm(1-alpha/2)); odr = odr/sum(odr); odr
### compute the false discovery risk
fdr = round((1/coef(summary(results))[2,]-1)*(alpha/(1-alpha))*100)[c(1,3,2)]; fdr
### fit z-curve with different alpha level, lower alpha to decrease false positive risk
alpha = .01
### lower.limit.of.fitted.interval
ll.int = 1.96
results = zcurve(data$z, bootstrap = 500, control=list(a = ll.int, sig_level = alpha)); plot.zcurve(results); summary(results)
results = zcurve(data$z, bootstrap = 500, control=list(a = ll.int, sig_level = alpha)); plot.zcurve(results); summary(results)
fdr = round((1/coef(summary(results))[2,]-1)*(alpha/(1-alpha))*100)[c(1,3,2)]; fdr
fdr = round((1/coef(summary(results))[2,]-1)*(alpha/(1-alpha))*100)[c(1,3,2)]; fdr
plot.zcurve(results,extrapolate = TRUE, CI = TRUE, annotation = TRUE)
odr = table(data$z > qnorm(1-alpha/2)); odr = odr/sum(odr); odr
plot.zcurve(results,extrapolate = TRUE, CI = TRUE)
### show full z-curve including predictd distribution for non-significant results
plot.zcurve(results,extrapolate = TRUE)
plot.zcurve(results,extrapolate = TRUE)
### clear the workspace
rm(list = ls())
### install packages if not already installed
install.packages("zcurve")
### install packages if not already installed
install.packages("zcurve")
install.packages("readxl")
### load the zcurve package to create a zcurve
library(zcurve)
### load the excel package to read excel files
library(readxl)
### get a list of file names in the directory
file.names = list.files(full.names = FALSE);
file.names = file.names[pos = unlist(gregexpr(pattern = "z.wos.csv",file.names,ignore.case=TRUE)) > 0]
file.names
getwd()
### read the data from csv file
data = data.frame(read.csv("zcurve_raver.xlsx"))
### read the data from csv file
data = data.frame(read_excel("zcurve_raver.xlsx"))
head(data)
### see how many rows and columns there are
dim(data)
### read the column/variable names
colnames(data)
### see how many rows have pvalues vs. no data (NA)
table(!is.na(data$z))
### remove rows with missing data
data = data[!is.na(data$z),]
### read the data from csv file
data = data.frame(read_excel("zcurve_raver.xlsx"))
data$z
summary(data$Test.Stat)
d <- data
head(d)
head(d$Test.Stat)
library(tidyverse)
# Define the conversion functions
f_to_z <- function(f_stat, df1, df2) {
p_val <- pf(f_stat, df1, df2, lower.tail = FALSE)
z_val <- qnorm(p_val / 2, lower.tail = FALSE)
return(z_val)
}
t_to_z <- function(t_stat, df) {
p_val <- pt(t_stat, df, lower.tail = FALSE)
z_val <- qnorm(p_val / 2, lower.tail = FALSE)
return(z_val)
}
chi2_to_z <- function(chi2_stat, df) {
p_val <- pchisq(chi2_stat, df, lower.tail = FALSE)
z_val <- qnorm(p_val / 2, lower.tail = FALSE)
return(z_val)
}
colnames(d)
# Calculate the z values
data <- data %>%
mutate(
z = case_when(
type.stat == "F"       ~ f_to_z(Test.Stat, df1, df2),
type.stat == "t"       ~ t_to_z(Test.Stat, df1),
type.stat == "chi2"    ~ chi2_to_z(Test.Stat, df1)
)
)
library(tidyverse)
# Calculate the z values
data <- data %>%
mutate(
z = case_when(
type.stat == "F"       ~ f_to_z(Test.Stat, df1, df2),
type.stat == "t"       ~ t_to_z(Test.Stat, df1),
type.stat == "chi2"    ~ chi2_to_z(Test.Stat, df1)
)
)
# Calculate the z values
data <- data %>%
transmute(Test.Stat = as.numeric(Test.Stat)) %>%
mutate(
z = case_when(
type.stat == "F"       ~ f_to_z(Test.Stat, df1, df2),
type.stat == "t"       ~ t_to_z(Test.Stat, df1),
type.stat == "chi2"    ~ chi2_to_z(Test.Stat, df1)
)
)
data <- data %>%
transmute(Test.Stat = as.numeric(Test.Stat))
colnames(d)
head(data)
# Calculate the z values
tmp <- d %>%
mutate(Test.Stat = as.numeric(Test.Stat)) %>%
mutate(
z = case_when(
type.stat == "F"       ~ f_to_z(Test.Stat, df1, df2),
type.stat == "t"       ~ t_to_z(Test.Stat, df1),
type.stat == "chi2"    ~ chi2_to_z(Test.Stat, df1)
)
)
tmp <- d %>%
mutate(Test.Stat = as.numeric(Test.Stat))
# Calculate the z values
tmp <- d %>%
mutate(Test.Stat = as.numeric(Test.Stat)) %>%
mutate(
z = case_when(
type.stat == "F"       ~ f_to_z(Test.Stat, df1, df2),
type.stat == "t"       ~ t_to_z(Test.Stat, df1),
type.stat == "chi2"    ~ chi2_to_z(Test.Stat, df1)
)
)
d$df1
d$df2
# Calculate the z values
tmp <- d %>%
mutate(Test.Stat = as.numeric(Test.Stat),
df2 = as.numeric(df2))
tmp$df2
# Calculate the z values
tmp <- d %>%
mutate(Test.Stat = as.numeric(Test.Stat),
df2 = as.numeric(df2))%>%
mutate(
z = case_when(
type.stat == "F"       ~ f_to_z(Test.Stat, df1, df2),
type.stat == "t"       ~ t_to_z(Test.Stat, df1),
type.stat == "chi2"    ~ chi2_to_z(Test.Stat, df1)
)
)
tmp$z
hist(tmp$z)
### replace very high z-scores and infinity (Inf) with a maximum value of your choice (any value greater than 6 is ok)
data$z[data$z > 10] = 10
### replace very high z-scores and infinity (Inf) with a maximum value of your choice (any value greater than 6 is ok)
tmp$z[tmp$z > 10] = 10
### get summary statistics for the transformed z-scores
summary(tmpa$z)
### get summary statistics for the transformed z-scores
summary(tmp$z)
### if number of z-scores (k) is large, run first without bootstrap
results = zcurve(tmp$z, bootstrap = 0); plot.zcurve(results); summary(results)
### show full z-curve including predictd distribution for non-significant results
plot.zcurve(results,extrapolate = TRUE)
install.packages("stats.check")
install.packages("stats_check")
install.packages("statscheck")
install.packages("statcheck")
library(statcheck)
?stacheck
?statcheck
d$type.stat
paste(d$Test.Stat,d$df1,d$df2)
paste(d$Test.Stat,"(",d$df1,d$df2,"(", sep = "")
paste(d$Test.Stat,"(",d$df1,d$df2,")", sep = "")
ifelse(is.na(d$df2), paste(d$Test.Stat,"(",d$df1,d$df2,")", sep = "")
is.na(d$df2)
is.na(tmp$df2)
ifelse(is.na(tmp$df2),paste(tmp$Test.Stat,"(",tmp$df1, "")", sep = ""), paste(tmp$Test.Stat,"(",tmp$df1, ",", tmp$df2,")", sep = "") )
ifelse(is.na(tmp$df2),paste(tmp$Test.Stat,"(",tmp$df1, ")", sep = ""), paste(tmp$Test.Stat,"(",tmp$df1, ",", tmp$df2,")", sep = "") )
# Calculate the z values
tmp <- d %>%
mutate(Test.Stat = as.numeric(Test.Stat),
df2 = as.numeric(df2),
stat = ifelse(is.na(tmp$df2),paste(tmp$Test.Stat,"(",tmp$df1, ")", sep = ""), paste(tmp$Test.Stat,"(",tmp$df1, ",", tmp$df2,")", sep = "") )
)
show(tmp)
View(tmp)
mutate(
z = case_when(
type.stat == "F"       ~ statcheck(stat, stat="F"),
type.stat == "t"       ~ statcheck(stat, stat ="t"),
type.stat == "chi2"    ~ statcheck(stat, stat ="chisq")
)
)
tmp$type.stat
mutate(
z = case_when(
type.stat == "F"       ~ statcheck(stat, stat="F"),
type.stat == "t"       ~ statcheck(stat, stat ="t"),
type.stat == "chi2"    ~ statcheck(stat, stat ="chisq")
)
)
# Calculate the z values
tmp <- d %>%
mutate(Test.Stat = as.numeric(Test.Stat),
df2 = as.numeric(df2),
stat = ifelse(is.na(tmp$df2),paste(tmp$Test.Stat,"(",tmp$df1, ")", sep = ""), paste(tmp$Test.Stat,"(",tmp$df1, ",", tmp$df2,")", sep = "") ))%>%
mutate(
z = case_when(
type.stat == "F"       ~ statcheck(stat, stat="F"),
type.stat == "t"       ~ statcheck(stat, stat ="t"),
type.stat == "chi2"    ~ statcheck(stat, stat ="chisq")
)
)
?pt
# Calculate the z values
tmp <- d %>%
mutate(Test.Stat = as.numeric(Test.Stat),
df2 = as.numeric(df2),
stat = ifelse(is.na(tmp$df2),paste(tmp$Test.Stat,"(",tmp$df1, ")", sep = ""), paste(tmp$Test.Stat,"(",tmp$df1, ",", tmp$df2,")", sep = "") ))%>%
mutate(
z = case_when(
type.stat == "F"       ~ pf(Test.Stat, df1, df2, lower.tail = FALSE),
type.stat == "t"       ~ pt(Test.Stat, df2, lower.tail = FALSE)*2,
type.stat == "chi2"    ~ pchisq(Test.Stat, df1,  lower.tail = FALSE)
)
)
tmp$z
log(tmp$z)
pf(10.12, 3, 116, lower.tail = FALSE)
pf(5.99, 2, 114, lower.tail = FALSE)
tmp$z
1.283320e-01
View(tmp)
library(tidyverse)
### clear the workspace
rm(list = ls())
### install packages if not already installed
install.packages("zcurve")
install.packages("readxl")
### load the zcurve package to create a zcurve
library(zcurve)
### load the excel package to read excel files
library(readxl)
### you can find many datasets here
"https://www.dropbox.com/s/wj82c0wy7f08gpb/"
### in theory you should be able to load data directly from the web
### but I am having problems with this file
### for now, just download the files
#link = "https://www.dropbox.com/s/wj82c0wy7f08gpb/Ulrich%20Schimmack-z.wos.csv?dl=0"
#data = read.csv(url(link))
#dim(data)
### read the data from csv file
data = data.frame(read_excel("zcurve_raver.xlsx"))
### read the column/variable names
colnames(data)
### see how many rows have pvalues vs. no data (NA)
table(!is.na(data$z))
### remove rows with missing data
#data = data[!is.na(data$z),]
### if the data are p-values, transform p-values to z-values
### using log.p allows to convert even very small p-values
tmp$z = qnorm(log(1 - tmp$p/2), log.p=TRUE)
install.packages("readxl")
library(tidyverse)
### clear the workspace
rm(list = ls())
### install packages if not already installed
install.packages("zcurve")
install.packages("readxl")
### load the zcurve package to create a zcurve
library(zcurve)
### load the excel package to read excel files
library(readxl)
### you can find many datasets here
"https://www.dropbox.com/s/wj82c0wy7f08gpb/"
### in theory you should be able to load data directly from the web
### but I am having problems with this file
### for now, just download the files
#link = "https://www.dropbox.com/s/wj82c0wy7f08gpb/Ulrich%20Schimmack-z.wos.csv?dl=0"
#data = read.csv(url(link))
#dim(data)
### read the data from csv file
data = data.frame(read_excel("zcurve_raver.xlsx"))
### read the column/variable names
colnames(data)
### see how many rows have pvalues vs. no data (NA)
table(!is.na(data$z))
### remove rows with missing data
#data = data[!is.na(data$z),]
### if the data are p-values, transform p-values to z-values
### using log.p allows to convert even very small p-values
tmp$z = qnorm(log(1 - tmp$p/2), log.p=TRUE)
install.packages("readxl")
?qnorm
library(tidyverse)
### clear the workspace
rm(list = ls())
### load the zcurve package to create a zcurve
library(zcurve)
### load the excel package to read excel files
library(readxl)
### you can find many datasets here
"https://www.dropbox.com/s/wj82c0wy7f08gpb/"
### in theory you should be able to load data directly from the web
### but I am having problems with this file
### for now, just download the files
#link = "https://www.dropbox.com/s/wj82c0wy7f08gpb/Ulrich%20Schimmack-z.wos.csv?dl=0"
#data = read.csv(url(link))
#dim(data)
### read the data from csv file
data = data.frame(read_excel("zcurve_raver.xlsx"))
### read the column/variable names
colnames(data)
### see how many rows have pvalues vs. no data (NA)
table(!is.na(data$z))
### remove rows with missing data
#data = data[!is.na(data$z),]
tmp$z = qnorm(log(1 - tmp$p/2), log.p=TRUE)
library(tidyverse)
### clear the workspace
rm(list = ls())
### load the zcurve package to create a zcurve
library(zcurve)
### load the excel package to read excel files
library(readxl)
### you can find many datasets here
"https://www.dropbox.com/s/wj82c0wy7f08gpb/"
### in theory you should be able to load data directly from the web
### but I am having problems with this file
### for now, just download the files
#link = "https://www.dropbox.com/s/wj82c0wy7f08gpb/Ulrich%20Schimmack-z.wos.csv?dl=0"
#data = read.csv(url(link))
#dim(data)
### read the data from csv file
data = data.frame(read_excel("zcurve_raver.xlsx"))
### read the column/variable names
colnames(data)
### see how many rows have pvalues vs. no data (NA)
table(!is.na(data$z))
### remove rows with missing data
#data = data[!is.na(data$z),]
# Calculate the z values
tmp <- d %>%
mutate(Test.Stat = as.numeric(Test.Stat),
df2 = as.numeric(df2),
stat = ifelse(is.na(tmp$df2),paste(tmp$Test.Stat,"(",tmp$df1, ")", sep = ""), paste(tmp$Test.Stat,"(",tmp$df1, ",", tmp$df2,")", sep = "") ))%>%
mutate(
p = case_when(
type.stat == "F"       ~ pf(Test.Stat, df1, df2, lower.tail = FALSE),
type.stat == "t"       ~ pt(Test.Stat, df2, lower.tail = FALSE)*2,
type.stat == "chi2"    ~ pchisq(Test.Stat, df1,  lower.tail = FALSE)
)
)
### read the data from csv file
d = data.frame(read_excel("zcurve_raver.xlsx"))
### read the column/variable names
colnames(d)
### see how many rows have pvalues vs. no data (NA)
table(!is.na(d$z))
# Calculate the z values
tmp <- d %>%
mutate(Test.Stat = as.numeric(Test.Stat),
df2 = as.numeric(df2),
stat = ifelse(is.na(tmp$df2),paste(tmp$Test.Stat,"(",tmp$df1, ")", sep = ""), paste(tmp$Test.Stat,"(",tmp$df1, ",", tmp$df2,")", sep = "") ))%>%
mutate(
p = case_when(
type.stat == "F"       ~ pf(Test.Stat, df1, df2, lower.tail = FALSE),
type.stat == "t"       ~ pt(Test.Stat, df2, lower.tail = FALSE)*2,
type.stat == "chi2"    ~ pchisq(Test.Stat, df1,  lower.tail = FALSE)
)
)
# Calculate the z values
tmp <- d %>%
mutate(Test.Stat = as.numeric(Test.Stat),
df2 = as.numeric(df2),
stat = ifelse(is.na(tmp$df2),paste(tmp$Test.Stat,"(",tmp$df1, ")", sep = ""), paste(tmp$Test.Stat,"(",tmp$df1, ",", tmp$df2,")", sep = "") ))%>%
mutate(
p = case_when(
type.stat == "F"       ~ pf(Test.Stat, df1, df2, lower.tail = FALSE),
type.stat == "t"       ~ pt(Test.Stat, df2, lower.tail = FALSE)*2,
type.stat == "chi2"    ~ pchisq(Test.Stat, df1,  lower.tail = FALSE)
)
)
# Calculate the z values
tmp <- d %>%
mutate(Test.Stat = as.numeric(Test.Stat),
df2 = as.numeric(df2),
stat = ifelse(is.na(df2),paste(Test.Stat,"(",df1, ")", sep = ""), paste(Test.Stat,"(",df1, ",", df2,")", sep = "") ))%>%
mutate(
p = case_when(
type.stat == "F"       ~ pf(Test.Stat, df1, df2, lower.tail = FALSE),
type.stat == "t"       ~ pt(Test.Stat, df2, lower.tail = FALSE)*2,
type.stat == "chi2"    ~ pchisq(Test.Stat, df1,  lower.tail = FALSE)
)
)
tmp$z = qnorm(log(1 - tmp$p/2), log.p=TRUE)
### replace very high z-scores and infinity (Inf) with a maximum value of your choice (any value greater than 6 is ok)
tmp$z[tmp$z > 10] = 10
### get summary statistics for the transformed z-scores
summary(tmp$z)
### if number of z-scores (k) is large, run first without bootstrap
results = zcurve(tmp$z, bootstrap = 0); plot.zcurve(results); summary(results)
### if number of z-scores (k) is large, run first without bootstrap
results = zcurve(tmp$z, bootstrap = 0); plot.zcurve(results); summary(results)
zcurve(tmp$z, bootstrap = 0)
tmp$z
hist(tmp$z)
tmp$z = qnorm(log(1 - tmp$p/2), log.p=TRUE) %>% filter(is.na(z))
tmp %>% filter(is.na(z))
tmp %>% filter(!is.na(z))
tmp2 <-  %>% filter(!is.na(z))
tmp2 <-tmp  %>% filter(!is.na(z))
tmp<-tmp  %>% filter(!is.na(z))
### replace very high z-scores and infinity (Inf) with a maximum value of your choice (any value greater than 6 is ok)
tmp$z[tmp$z > 10] = 10
### get summary statistics for the transformed z-scores
summary(tmp$z)
### if number of z-scores (k) is large, run first without bootstrap
results = zcurve(tmp$z, bootstrap = 0); plot.zcurve(results); summary(results)
### show full z-curve including predictd distribution for non-significant results
plot.zcurve(results,extrapolate = TRUE)
### if numer of z-scores (k) is small or for final analysis, run with boostrap default minimum 500
results = zcurve(data$z, bootstrap = 500); plot.zcurve(results); summary(results)
### if numer of z-scores (k) is small or for final analysis, run with boostrap default minimum 500
results = zcurve(tmp$z, bootstrap = 500); plot.zcurve(results); summary(results)
### show full z-curve including predictd distribution for non-significant results and confidence interval
plot.zcurve(results,extrapolate = TRUE, CI = TRUE)
hist(tmp$z)
?zcurve
plot.zcurve(results)
results
### show full z-curve including predictd distribution for non-significant results
plot.zcurve(results,extrapolate = TRUE)
### if numer of z-scores (k) is small or for final analysis, run with boostrap default minimum 500
results = zcurve(tmp$z, bootstrap = 500); plot.zcurve(results); summary(results)
### if numer of z-scores (k) is small or for final analysis, run with boostrap default minimum 500
results = zcurve(tmp$z, bootstrap = 500); plot.zcurve(results); summary(results)
### show full z-curve including predictd distribution for non-significant results and confidence interval
plot.zcurve(results,extrapolate = TRUE, CI = TRUE)
### if numer of z-scores (k) is small or for final analysis, run with boostrap default minimum 500
results = zcurve(tmp$z, bootstrap = 500); plot.zcurve(results); summary(results)
### show full z-curve including predictd distribution for non-significant results and confidence interval
plot.zcurve(results,extrapolate = TRUE, CI = TRUE)
### add annotation with key results to the plot
plot.zcurve(results,extrapolate = TRUE, CI = TRUE, annotation = TRUE)
### compute Observed Discovery Rate (ODR); percentage of significant results
alpha = .05
### compute the false discovery risk
fdr = round((1/coef(summary(results))[2,]-1)*(alpha/(1-alpha))*100)[c(1,3,2)]; fdr
### lower.limit.of.fitted.interval
ll.int = 1.96
results = zcurve(tmp$z, bootstrap = 500, control=list(a = ll.int, sig_level = alpha)); plot.zcurve(results); summary(results)
fdr = round((1/coef(summary(results))[2,]-1)*(alpha/(1-alpha))*100)[c(1,3,2)]; fdr
plot.zcurve(results,extrapolate = TRUE, CI = TRUE, annotation = TRUE)
fdr = round((1/coef(summary(results))[2,]-1)*(alpha/(1-alpha))*100)[c(1,3,2)]; fdr
odr = table(data$z > qnorm(1-alpha/2)); odr = odr/sum(odr); odr
fdr = round((1/coef(summary(results))[2,]-1)*(alpha/(1-alpha))*100)[c(1,3,2)]; fdr
plot.zcurve(results,extrapolate = TRUE, CI = TRUE, annotation = TRUE)
odr = table(data$z > qnorm(1-alpha/2)); odr = odr/sum(odr); odr
### fit z-curve with different alpha level, lower alpha to decrease false positive risk
alpha = .01
### lower.limit.of.fitted.interval
ll.int = 1.96
results = zcurve(tmp$z, bootstrap = 500, control=list(a = ll.int, sig_level = alpha)); plot.zcurve(results); summary(results)
fdr = round((1/coef(summary(results))[2,]-1)*(alpha/(1-alpha))*100)[c(1,3,2)]; fdr
odr = table(data$z > qnorm(1-alpha/2)); odr = odr/sum(odr); odr
