---
title: "z-curve test"
format: html
editor: visual
---

## Schimmack's messy code 

```{r setup}
library(tidyverse)
 
### clear the workspace
rm(list = ls())


### load the zcurve package to create a zcurve
library(zcurve)

### load the excel package to read excel files
library(readxl)

### you can find many datasets here
"https://www.dropbox.com/s/wj82c0wy7f08gpb/"

### in theory you should be able to load data directly from the web
### but I am having problems with this file 
### for now, just download the files 
#link = "https://www.dropbox.com/s/wj82c0wy7f08gpb/Ulrich%20Schimmack-z.wos.csv?dl=0"
#data = read.csv(url(link))
#dim(data)


### read the data from csv file
d = data.frame(read_excel("zcurve_raver.xlsx"))


### read the column/variable names
colnames(d)

### see how many rows have pvalues vs. no data (NA)
table(!is.na(d$z))

### remove rows with missing data 
#data = data[!is.na(data$z),]
```

First, calculate exact p values
```{r C}


# Calculate the z values
tmp <- d %>%
  mutate(Test.Stat = as.numeric(Test.Stat),
         df2 = as.numeric(df2),
         stat = ifelse(is.na(df2),paste(Test.Stat,"(",df1, ")", sep = ""), paste(Test.Stat,"(",df1, ",", df2,")", sep = "") ))%>% 
  mutate(
    p = case_when(
      type.stat == "F"       ~ pf(Test.Stat, df1, df2, lower.tail = FALSE),
      type.stat == "t"       ~ pt(Test.Stat, df2, lower.tail = FALSE)*2,
      type.stat == "chi2"    ~ pchisq(Test.Stat, df1,  lower.tail = FALSE)
    )
  )


```


```{r convert test statistics to z scores}
### if the data are p-values, transform p-values to z-values
### using log.p allows to convert even very small p-values 

tmp$z = qnorm(log(1 - tmp$p/2), log.p=TRUE)

tmp<-tmp  %>% filter(!is.na(z))

### replace very high z-scores and infinity (Inf) with a maximum value of your choice (any value greater than 6 is ok)
tmp$z[tmp$z > 10] = 10

### get summary statistics for the transformed z-scores
summary(tmp$z)


### conduct z-curve analysis and store results in a data frame "results"

### if number of z-scores (k) is large, run first without bootstrap
results = zcurve(tmp$z, bootstrap = 0); plot.zcurve(results); summary(results)

### show full z-curve including predictd distribution for non-significant results 
plot.zcurve(results,extrapolate = TRUE)
```

````{r }
### if numer of z-scores (k) is small or for final analysis, run with boostrap default minimum 500
results = zcurve(tmp$z, bootstrap = 500); plot.zcurve(results); summary(results)

### show full z-curve including predictd distribution for non-significant results and confidence interval  
plot.zcurve(results,extrapolate = TRUE, CI = TRUE)

````
```{r}
### add annotation with key results to the plot
plot.zcurve(results,extrapolate = TRUE, CI = TRUE, annotation = TRUE)

```

````{r}
### compute Observed Discovery Rate (ODR); percentage of significant results
alpha = .05
odr = table(data$z > qnorm(1-alpha/2)); odr = odr/sum(odr); odr

### compute the false discovery risk 
fdr = round((1/coef(summary(results))[2,]-1)*(alpha/(1-alpha))*100)[c(1,3,2)]; fdr
```

``` {r}
### fit z-curve with different alpha level, lower alpha to decrease false positive risk 
alpha = .01
### lower.limit.of.fitted.interval
ll.int = 1.96
results = zcurve(tmp$z, bootstrap = 500, control=list(a = ll.int, sig_level = alpha)); plot.zcurve(results); summary(results)

fdr = round((1/coef(summary(results))[2,]-1)*(alpha/(1-alpha))*100)[c(1,3,2)]; fdr
plot.zcurve(results,extrapolate = TRUE, CI = TRUE, annotation = TRUE)
odr = table(data$z > qnorm(1-alpha/2)); odr = odr/sum(odr); odr





```
